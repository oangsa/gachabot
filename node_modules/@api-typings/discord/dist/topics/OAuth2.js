"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2Scope = exports.OAuth2URL = void 0;
/**
 * @remarks
 * In accordance with the relevant RFCs, the token and token revocation URLs
 * will only accept a content type of `x-www-form-urlencoded`. JSON content is
 * not permitted and will return an error.
 *
 * @source {@link https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-urls|OAuth2}
 */
var OAuth2URL;
(function (OAuth2URL) {
    /**
     * Base authorization URL.
     */
    OAuth2URL["Base"] = "https://discord.com/api/oauth2/authorize";
    /**
     * Token URL.
     */
    OAuth2URL["Token"] = "https://discord.com/api/oauth2/token";
    /**
     * Token Revocation URL.
     */
    OAuth2URL["TokenRevocation"] = "https://discord.com/api/oauth2/token/revoke";
})(OAuth2URL = exports.OAuth2URL || (exports.OAuth2URL = {}));
/**
 * Some scopes require approval from Discord to use. Requesting them from a user
 * without approval from Discord may cause undocumented/error behavior in the
 * OAuth2 flow.
 *
 * @remarks
 * `guilds.join` and `bot` require you to have a bot account linked to your
 * application. Also, in order to add a user to a guild, your bot has to already
 * belong to that guild.
 *
 * @source {@link https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes|OAuth2}
 */
var OAuth2Scope;
(function (OAuth2Scope) {
    /**
     * Allows your app to fetch data from a user's "Now Playing/Recently Played"
     * list. Requires Discord approval.
     */
    OAuth2Scope["ActivitiesRead"] = "activities.read";
    /**
     * Allows your app to update a user's activity. Requires Discord approval.
     */
    OAuth2Scope["ActivitiesWrite"] = "activities.write";
    /**
     * Allows your app to read build data for a user's applications.
     */
    OAuth2Scope["ApplicationsBuildsRead"] = "applications.builds.read";
    /**
     * Allows your app to upload/update builds for a user's applications.
     * Requires Discord approval.
     */
    OAuth2Scope["ApplicationsBuildsUpload"] = "applications.builds.upload";
    /**
     * Allows your app to use commands in a guild.
     */
    OAuth2Scope["ApplicationsCommands"] = "applications.commands";
    /**
     * Allows your app to update its commands via bearer token. Client
     * credentials grant only.
     */
    OAuth2Scope["ApplicationsCommandsUpdate"] = "applications.commands.update";
    /**
     * Allows your app to read entitlements for a user's applications.
     */
    OAuth2Scope["ApplicationsEntitlements"] = "applications.entitlements";
    /**
     * Allows your app to read and update store data for a user's applications.
     */
    OAuth2Scope["ApplicationsStoreUpdate"] = "applications.store.update";
    /**
     * For OAuth2 bots, this puts the bot in the user's selected guild by
     * default.
     */
    OAuth2Scope["Bot"] = "bot";
    /**
     * Allows `/users/@me/connections` to return linked third-party accounts.
     */
    OAuth2Scope["Connections"] = "connections";
    /**
     * Allows `/users/@me` to return an `email`.
     */
    OAuth2Scope["Email"] = "email";
    /**
     * Allows your app to join users to a group DM.
     */
    OAuth2Scope["GroupDMJoin"] = "gdm.join";
    /**
     * Allows `/users/@me/guilds` to return basic information about all of a
     * user's guilds.
     */
    OAuth2Scope["Guilds"] = "guilds";
    /**
     * Allows `/guilds/{guild.id}/members/{user.id}` to be used for joining
     * users to a guild.
     */
    OAuth2Scope["GuildsJoin"] = "guilds.join";
    /**
     * Allows `/users/@me` without `email`.
     */
    OAuth2Scope["Identify"] = "identify";
    /**
     * For local RPC server API access, this allows you to read messages from
     * all client channels (otherwise restricted to channels/guilds your app
     * creates).
     */
    OAuth2Scope["MessagesRead"] = "messages.read";
    /**
     * Allows your app to know a user's friends and implicit relationships.
     * Requires Discord approval.
     */
    OAuth2Scope["RelationshipsRead"] = "relationships.read";
    /**
     * For local RPC server access, this allows you to control a user's local
     * Discord client. Requires Discord approval.
     */
    OAuth2Scope["RPC"] = "rpc";
    /**
     * For local RPC server access, this allows you to update a user's activity.
     * Requires Discord approval.
     */
    OAuth2Scope["RPCActivitiesWrite"] = "rpc.activities.write";
    /**
     * For local RPC server access, this allows you to receive notifications
     * pushed out to the user. Requires Discord approval.
     */
    OAuth2Scope["RPCNotificationsRead"] = "rpc.notifications.read";
    /**
     * For local RPC server access, this allows you to read a user's voice
     * settings and listen for voice events. Requires Discord approval.
     */
    OAuth2Scope["RPCVoiceRead"] = "rpc.voice.read";
    /**
     * For local RPC server access, this allows you to updates a user's voice
     * settings. Requires Discord approval.
     */
    OAuth2Scope["RPCVoiceWrite"] = "rpc.voice.write";
    /**
     * This generates a webhook that is returned in the oauth token response for
     * authorization code grants.
     */
    OAuth2Scope["WebhookIncoming"] = "webhook.incoming";
})(OAuth2Scope = exports.OAuth2Scope || (exports.OAuth2Scope = {}));
