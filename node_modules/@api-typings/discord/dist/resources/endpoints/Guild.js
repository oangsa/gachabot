"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageSortOrder = exports.MessageSortType = exports.MessageContentType = exports.WidgetStyle = void 0;
/**
 * @source {@link https://discord.com/developers/docs/resources/guild#get-guild-widget-image-widget-style-options|Guild}
 */
var WidgetStyle;
(function (WidgetStyle) {
    /**
     * Shield style widget with Discord icon and guild members online count.
     */
    WidgetStyle["Shield"] = "shield";
    /**
     * Large image with guild icon, name, and online count.
     * `"POWERED BY DISCORD"` as the footer of the widget.
     */
    WidgetStyle["Banner1"] = "banner1";
    /**
     * Smaller widget style with guild icon, name and online count. Split on
     * the right with Discord logo.
     */
    WidgetStyle["Banner2"] = "banner2";
    /**
     * Large image with guild icon, name and online count. In the footer,
     * Discord logo on the left and `"Chat Now"` on the right.
     */
    WidgetStyle["Banner3"] = "banner3";
    /**
     * Large Discord logo at the top of the widget. Guild icon, name and online
     * count in the middle portion of the widget and a `"JOIN MY SERVER"`
     * button at the bottom.
     */
    WidgetStyle["Banner4"] = "banner4";
})(WidgetStyle = exports.WidgetStyle || (exports.WidgetStyle = {}));
var MessageContentType;
(function (MessageContentType) {
    MessageContentType["Link"] = "link";
    MessageContentType["Embed"] = "embed";
    MessageContentType["Video"] = "video";
    MessageContentType["Image"] = "image";
    MessageContentType["File"] = "file";
    MessageContentType["Sound"] = "sound";
    MessageContentType["Sticker"] = "sticker";
})(MessageContentType = exports.MessageContentType || (exports.MessageContentType = {}));
var MessageSortType;
(function (MessageSortType) {
    MessageSortType["Timestamp"] = "timestamp";
    MessageSortType["Relevance"] = "relevance";
})(MessageSortType = exports.MessageSortType || (exports.MessageSortType = {}));
var MessageSortOrder;
(function (MessageSortOrder) {
    MessageSortOrder["Ascending"] = "asc";
    MessageSortOrder["Descending"] = "desc";
})(MessageSortOrder = exports.MessageSortOrder || (exports.MessageSortOrder = {}));
