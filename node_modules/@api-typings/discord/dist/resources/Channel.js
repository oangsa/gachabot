"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbedLimit = exports.AllowedMentionsType = exports.EmbedType = exports.OverwriteType = exports.MessageFlags = exports.MessageActivityType = exports.MessageType = exports.VideoQualityMode = exports.ChannelType = void 0;
/**
 * @source {@link https://discord.com/developers/docs/resources/channel#channel-object-channel-types|Channel}
 */
var ChannelType;
(function (ChannelType) {
    /**
     * A text channel within a server.
     */
    ChannelType[ChannelType["GuildText"] = 0] = "GuildText";
    /**
     * A direct message between users.
     */
    ChannelType[ChannelType["DM"] = 1] = "DM";
    /**
     * A voice channel within a server.
     */
    ChannelType[ChannelType["GuildVoice"] = 2] = "GuildVoice";
    /**
     * A direct message between multiple users.
     */
    ChannelType[ChannelType["GroupDM"] = 3] = "GroupDM";
    /**
     * An organizational category that contains up to `50` channels.
     */
    ChannelType[ChannelType["GuildCategory"] = 4] = "GuildCategory";
    /**
     * A channel that users can follow and crosspost into their own server.
     */
    ChannelType[ChannelType["GuildNews"] = 5] = "GuildNews";
    /**
     * A channel in which game developers can sell their game on Discord.
     */
    ChannelType[ChannelType["GuildStore"] = 6] = "GuildStore";
    /**
     * A temporary sub-channel within a `GUILD_NEWS` channel.
     */
    ChannelType[ChannelType["GuildNewsThread"] = 10] = "GuildNewsThread";
    /**
     * A temporary sub-channel within a `GUILD_TEXT` channel.
     */
    ChannelType[ChannelType["GuildPublicThread"] = 11] = "GuildPublicThread";
    /**
     * A temporary sub-channel within a `GUILD_TEXT` channel that is only
     * viewable by those invited and those with the `MANAGE_THREADS`
     * permission.
     */
    ChannelType[ChannelType["GuildPrivateThread"] = 12] = "GuildPrivateThread";
    /**
     * A voice channel for hosting events with an audience.
     */
    ChannelType[ChannelType["GuildStageVoice"] = 13] = "GuildStageVoice";
    ChannelType[ChannelType["GuildDirectory"] = 14] = "GuildDirectory";
})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));
/**
 * @source {@link https://discord.com/developers/docs/resources/channel#channel-object-video-quality-modes|Channel}
 */
var VideoQualityMode;
(function (VideoQualityMode) {
    /**
     * Discord chooses the quality for optimal performance.
     */
    VideoQualityMode[VideoQualityMode["Auto"] = 1] = "Auto";
    /**
     * 720p.
     */
    VideoQualityMode[VideoQualityMode["Full"] = 2] = "Full";
})(VideoQualityMode = exports.VideoQualityMode || (exports.VideoQualityMode = {}));
/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-types|Channel}
 */
var MessageType;
(function (MessageType) {
    MessageType[MessageType["Default"] = 0] = "Default";
    MessageType[MessageType["RecipientAdd"] = 1] = "RecipientAdd";
    MessageType[MessageType["RecipientRemove"] = 2] = "RecipientRemove";
    MessageType[MessageType["Call"] = 3] = "Call";
    MessageType[MessageType["ChannelNameChange"] = 4] = "ChannelNameChange";
    MessageType[MessageType["ChannelIconChange"] = 5] = "ChannelIconChange";
    MessageType[MessageType["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
    MessageType[MessageType["GuildMemberJoin"] = 7] = "GuildMemberJoin";
    MessageType[MessageType["UserPremiumGuildSubscription"] = 8] = "UserPremiumGuildSubscription";
    MessageType[MessageType["UserPremiumGuildSubscriptionTier1"] = 9] = "UserPremiumGuildSubscriptionTier1";
    MessageType[MessageType["UserPremiumGuildSubscriptionTier2"] = 10] = "UserPremiumGuildSubscriptionTier2";
    MessageType[MessageType["UserPremiumGuildSubscriptionTier3"] = 11] = "UserPremiumGuildSubscriptionTier3";
    MessageType[MessageType["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
    MessageType[MessageType["GuildStream"] = 13] = "GuildStream";
    MessageType[MessageType["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
    MessageType[MessageType["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
    MessageType[MessageType["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
    MessageType[MessageType["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
    MessageType[MessageType["ThreadCreated"] = 18] = "ThreadCreated";
    MessageType[MessageType["Reply"] = 19] = "Reply";
    MessageType[MessageType["ChatInputCommand"] = 20] = "ChatInputCommand";
    MessageType[MessageType["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
    MessageType[MessageType["GuildInviteReminder"] = 22] = "GuildInviteReminder";
    MessageType[MessageType["ContextMenuCommand"] = 23] = "ContextMenuCommand";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-activity-types|Channel}
 */
var MessageActivityType;
(function (MessageActivityType) {
    MessageActivityType[MessageActivityType["Join"] = 1] = "Join";
    MessageActivityType[MessageActivityType["Spectate"] = 2] = "Spectate";
    MessageActivityType[MessageActivityType["Listen"] = 3] = "Listen";
    MessageActivityType[MessageActivityType["JoinRequest"] = 5] = "JoinRequest";
})(MessageActivityType = exports.MessageActivityType || (exports.MessageActivityType = {}));
/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-flags|Channel}
 */
var MessageFlags;
(function (MessageFlags) {
    /**
     * This message has been published to subscribed channels (via Channel
     * Following).
     */
    MessageFlags[MessageFlags["Crossposted"] = 1] = "Crossposted";
    /**
     * This message originated from a message in another channel (via Channel
     * Following).
     */
    MessageFlags[MessageFlags["IsCrosspost"] = 2] = "IsCrosspost";
    /**
     * Do not include any embeds when serializing this message.
     */
    MessageFlags[MessageFlags["SuppressEmbeds"] = 4] = "SuppressEmbeds";
    /**
     * The source message for this crosspost has been deleted (via Channel
     * Following).
     */
    MessageFlags[MessageFlags["SourceDeleted"] = 8] = "SourceDeleted";
    /**
     * This message came from the urgent message system.
     */
    MessageFlags[MessageFlags["Urgent"] = 16] = "Urgent";
    /**
     * This message has an associated thread, with the same ID as the message.
     */
    MessageFlags[MessageFlags["HasThread"] = 32] = "HasThread";
    /**
     * This message is only visible to the user who invoked the Interaction.
     */
    MessageFlags[MessageFlags["Ephemeral"] = 64] = "Ephemeral";
    /**
     * This message is an `InteractionResponse` and the bot is "thinking".
     */
    MessageFlags[MessageFlags["Loading"] = 128] = "Loading";
})(MessageFlags = exports.MessageFlags || (exports.MessageFlags = {}));
var OverwriteType;
(function (OverwriteType) {
    OverwriteType[OverwriteType["Role"] = 0] = "Role";
    OverwriteType[OverwriteType["Member"] = 1] = "Member";
})(OverwriteType = exports.OverwriteType || (exports.OverwriteType = {}));
/**
 * Embed types are "loosely defined" and, for the most part, are not used by
 * the clients for rendering. Embed attributes power what is rendered.
 *
 * @source {@link https://discord.com/developers/docs/resources/channel#embed-object-embed-types|Channel}
 */
var EmbedType;
(function (EmbedType) {
    /**
     * Generic embed rendered from embed attributes.
     */
    EmbedType["Rich"] = "rich";
    /**
     * Image embed.
     */
    EmbedType["Image"] = "image";
    /**
     * Video embed.
     */
    EmbedType["Video"] = "video";
    /**
     * Animated GIF image embed rendered as a video embed.
     */
    EmbedType["GIFV"] = "gifv";
    /**
     * Article embed.
     */
    EmbedType["Article"] = "article";
    /**
     * Link embed.
     */
    EmbedType["Link"] = "link";
})(EmbedType = exports.EmbedType || (exports.EmbedType = {}));
/**
 * @source {@link https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types|Channel}
 */
var AllowedMentionsType;
(function (AllowedMentionsType) {
    /**
     * Controls role mentions.
     */
    AllowedMentionsType["RoleMentions"] = "roles";
    /**
     * Controls user mentions.
     */
    AllowedMentionsType["UserMentions"] = "users";
    /**
     * Controls `@everyone` and `@here` mentions.
     */
    AllowedMentionsType["EveryoneMentions"] = "everyone";
})(AllowedMentionsType = exports.AllowedMentionsType || (exports.AllowedMentionsType = {}));
/**
 * To facilitate showing rich content, rich embeds do not follow the traditional
 * limits of message content. However, some limits are still in place to prevent
 * excessively large embeds.
 *
 * All of the limits are measured inclusively. Leading and trailing whitespace
 * characters are not included (they are trimmed automatically).
 *
 * Additionally, the characters in all `title`, `description`, `field.name`,
 * `field.value`, `footer.text`, and `author.name` fields must not exceed `6000`
 * characters in total. Violating any of these constraints will result in a
 * `Bad Request` response.
 *
 * @source {@link https://discord.com/developers/docs/resources/channel#embed-limits-limits|Channel}
 */
var EmbedLimit;
(function (EmbedLimit) {
    /**
     * `256` characters.
     */
    EmbedLimit[EmbedLimit["Title"] = 256] = "Title";
    /**
     * `4096` characters.
     */
    EmbedLimit[EmbedLimit["Description"] = 4096] = "Description";
    /**
     * Up to `25` field objects.
     */
    EmbedLimit[EmbedLimit["Fields"] = 25] = "Fields";
    /**
     * `256` characters.
     */
    EmbedLimit[EmbedLimit["FieldName"] = 256] = "FieldName";
    /**
     * `1024` characters
     */
    EmbedLimit[EmbedLimit["FieldValue"] = 1024] = "FieldValue";
    /**
     * `2048` characters.
     */
    EmbedLimit[EmbedLimit["Footer"] = 2048] = "Footer";
    /**
     * `256` characters.
     */
    EmbedLimit[EmbedLimit["Author"] = 256] = "Author";
})(EmbedLimit = exports.EmbedLimit || (exports.EmbedLimit = {}));
