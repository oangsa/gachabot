import type { Nullable } from 'extended-utility-types';
import type { PartialIntegration, snowflake, StatusType } from '../';
export interface PartialUser {
    /**
     * The user's ID. Requires the `identify` OAuth2 scope.
     */
    id: snowflake;
    /**
     * The user's username, not unique across the platform. Requires the
     * `identify` OAuth2 scope.
     */
    username: string;
    /**
     * The user's 4-digit discord-tag. Requires the `identify` OAuth2 scope.
     */
    discriminator: `${number}`;
    /**
     * The user's avatar hash. Requires the `identify` OAuth2 scope.
     */
    avatar: Nullable<string>;
}
/**
 * Users in Discord are generally considered the base entity. Users can spawn
 * across the entire platform, be members of guilds, participate in text and
 * voice chat, and much more. Users are separated by a distinction of "bot" vs
 * "normal." Although they are similar, bot users are automated users that are
 * "owned" by another user. Unlike normal users, bot users do *not* have a
 * limitation on the number of Guilds they can be a part of.
 *
 * @source {@link https://discord.com/developers/docs/resources/user#user-object-user-structure|User}
 */
export interface User extends PartialUser {
    /**
     * Whether the user belongs to an OAuth2 application. Requires the
     * `identify` OAuth2 scope.
     */
    bot?: boolean;
    /**
     * Whether the user is an Official Discord System user (part of the urgent
     * message system). Requires the `identify` OAuth2 scope.
     */
    system?: boolean;
    /**
     * Whether the user has two factor enabled on their account. Requires the
     * `identify` OAuth2 scope.
     */
    mfa_enabled?: boolean;
    /**
     * The user's banner, or `null` if unset. Requires the `identify` OAuth2
     * scope.
     */
    banner?: Nullable<string>;
    /**
     * The user's banner color, encoded as an integer representation of a
     * hexadecimal color coode. Requires the `identify` OAuth2 scope.
     */
    accent_color?: number;
    /**
     * The user's chosen language option. Requires the `identify` OAuth2 scope.
     */
    locale?: string;
    /**
     * Whether the email on this account has been verified. Requires the `email`
     * OAuth2 scope.
     */
    verified?: boolean;
    /**
     * The user's email. Requires the `email` OAuth2 scope.
     */
    email?: Nullable<string>;
    /**
     * The flags on a user's account. Requires the `identify` OAuth2 scope.
     */
    flags?: UserFlags;
    /**
     * The type of Nitro subscription on a user's account. Requires the
     * `identify` OAuth2 scope.
     */
    premium_type?: PremiumType;
    /**
     * The public flags on a user's account. Requires the `identify` OAuth2
     * scope.
     */
    public_flags?: UserFlags;
}
/**
 * @source {@link https://discord.com/developers/docs/resources/user#user-object-user-flags|User}
 */
export declare enum UserFlags {
    None = 0,
    DiscordEmployee = 1,
    PartneredServerOwner = 2,
    HypesquadEvents = 4,
    BugHunterLevel1 = 8,
    MFASMS = 16,
    PremiumPromoDismissed = 32,
    HouseBravery = 64,
    HouseBrilliance = 128,
    HouseBalance = 256,
    EarlySupporter = 512,
    TeamUser = 1024,
    HasUnreadUrgentMessages = 8192,
    BugHunterLevel2 = 16384,
    VerifiedBot = 65536,
    EarlyVerifiedBotDeveloper = 131072,
    DiscordCertifiedModerator = 262144
}
/**
 * Premium types denote the level of premium a user has.
 *
 * @source {@link https://discord.com/developers/docs/resources/user#user-object-premium-types|User}
 */
export declare enum PremiumType {
    None = 0,
    NitroClassic = 1,
    Nitro = 2
}
export interface PartialConnection {
    /**
     * ID of the connection account.
     */
    id: string;
    /**
     * The username of the connection account.
     */
    name: string;
    /**
     * The service of the connection.
     */
    type: PlatformType;
    /**
     * Whether the connection is verified.
     */
    verified: boolean;
}
/**
 * The connection object that the user has attached.
 *
 * @source {@link https://discord.com/developers/docs/resources/user#connection-object-connection-structure|User}
 */
export interface Connection extends PartialConnection {
    /**
     * Whether the connection is revoked.
     */
    revoked?: boolean;
    /**
     * An array of partial server integrations.
     */
    integrations?: PartialIntegration[];
    /**
     * Whether friend sync is enabled for this connection.
     */
    friend_sync: boolean;
    /**
     * Whether activities related to this connection will be shown in presence
     * updates.
     */
    show_activity: boolean;
    /**
     * Visibility of this connection.
     */
    visibility: VisibilityType;
}
export declare type PlatformType = 'battlenet' | 'facebook' | 'github' | 'instagram' | 'leagueoflegends' | 'reddit' | 'samsung' | 'skype' | 'soundcloud' | 'spotify' | 'steam' | 'twitch' | 'twitter' | 'xbox' | 'youtube';
/**
 * @source {@link https://discord.com/developers/docs/resources/user#connection-object-visibility-types|User}
 */
export declare enum VisibilityType {
    /**
     * Invisible to everyone except the user themselves.
     */
    None = 0,
    /**
     * Visible to everyone.
     */
    Everyone = 1
}
export interface Profile {
    user: User;
    mutual_guilds?: MutualGuild[];
    connected_accounts: PartialConnection[];
    premium_since: Nullable<string>;
    premium_guild_since: Nullable<string>;
}
export interface MutualGuild {
    id: snowflake;
    nick: Nullable<string>;
}
export interface Relationship {
    id: snowflake;
    type: RelationshipType;
    nickname: Nullable<string>;
    user: User;
}
export declare enum RelationshipType {
    /**
     * User has no intrinsic relationship.
     */
    None = 0,
    /**
     * User is a friend.
     */
    Friend = 1,
    /**
     * User is blocked.
     */
    Blocked = 2,
    /**
     * User has a pending incoming friend request to connected user.
     */
    PendingIncoming = 3,
    /**
     * Current user has a pending outgoing friend request to user.
     */
    PendingOutgoing = 4,
    /**
     * User is not friends, but interacts with current user often (frequency +
     * recency).
     */
    Implicit = 5
}
export interface UserSettings {
    /**
     * Control how long you need to be inactive on desktop, in minutes, before
     * receiving push notifications.
     */
    afk_timeout: PushNotificationInactiveTimeout;
    /**
     * Allows Discord to record when a screen reader is being used while using
     * Discord to improve accessibility.
     */
    allow_accessibility_detection: boolean;
    /**
     * Play animated emojis.
     */
    animate_emoji: boolean;
    /**
     * Controls when stickers animate.
     */
    animate_stickers: AnimateSticker;
    contact_sync_enabled: boolean;
    /**
     * Automatically convert emoticons in messages to emojis.
     */
    convert_emoticons: boolean;
    custom_status: CustomStatus;
    /**
     * Allow direct messages from guild members. This setting is applied when a
     * new guild is joined. It does not apply retroactively to existing guilds.
     */
    default_guilds_restricted: boolean;
    detect_platform_accounts: boolean;
    /**
     * Exposes context menu items helpful for people writing bots using the API.
     */
    developer_mode: boolean;
    disable_games_tab: boolean;
    /**
     * Allow playback and usage of `/tts` command.
     */
    enable_tts_command: boolean;
    /**
     * Automatically scan and delete direct messages received that contain
     * explicit media content.
     */
    explicit_content_filter: ExplicitUserContentFilterLevel;
    friend_discovery_flags: number;
    /**
     * Who can add you as a friend.
     */
    friend_source_flags: FriendSources;
    /**
     * Automatically play GIFs when Discord is focused.
     */
    gif_auto_play: boolean;
    guild_folders: GuildFolder[];
    guild_positions: snowflake[];
    /**
     * Display images and videos when uploaded directly to Discord. Images
     * larger than `10 MB` will not be previewed.
     */
    inline_attachment_media: boolean;
    /**
     * Display images and videos when posted as links to chat.
     */
    inline_embed_media: boolean;
    locale: string;
    message_display_compact: boolean;
    native_phone_integration_enabled: boolean;
    /**
     * Show website preview info from links pasted into chat.
     */
    render_embeds: boolean;
    /**
     * Show emoji reactions on messages.
     */
    render_reactions: boolean;
    restricted_guilds: snowflake[];
    /**
     * Display current activity (the game being played if detectable, an
     * activity that supports Rich Presence, or a public Stage being attended)
     * as a status message.
     */
    show_current_game: boolean;
    status: StatusType;
    stream_notifications_enabled: boolean;
    theme: 'light' | 'dark';
    timezone_offset: number;
    /**
     * Allow access on NSFW guilds on iOS.
     */
    view_nsfw_guilds: boolean;
}
export declare type PushNotificationInactiveTimeout = 60 | 120 | 180 | 240 | 300 | 360 | 420 | 480 | 540 | 600;
export declare enum AnimateSticker {
    Always = 0,
    /**
     * On the desktop client, stickers will animate on hover or focus. On mobile
     * clients, stickers will animate on long-press.
     */
    Interaction = 1,
    Never = 2
}
export interface CustomStatus {
    text: string;
    expires_at: Nullable<string>;
    emoji_id: Nullable<snowflake>;
    emoji_name: Nullable<string>;
}
export declare enum ExplicitUserContentFilterLevel {
    /**
     * Direct messages will not be scanned for explicit content.
     */
    Disabled = 0,
    /**
     * Scan direct messages from everyone unless they are a friend.
     */
    FriendsOnly = 1,
    /**
     * Scan direct messages from everyone.
     */
    Everyone = 2
}
export interface FriendSources {
    all?: boolean;
    mutual_friends?: boolean;
    mutual_guilds?: boolean;
}
export interface GuildFolder {
    guild_ids: [snowflake, ...snowflake[]];
    id: string | number;
    name: Nullable<string>;
    color: Nullable<number>;
}
